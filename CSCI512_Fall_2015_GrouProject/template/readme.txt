==================================================
System requirement:
	OS: Windows 10, OS X El Capitan
	Software:
		Testing: Ruby (2.1 for Windows, any 2.x version for others), Java, Cucumber, Capybara, selenium-webdriver, Fire fox
==================================================
Software installation instruction:
	Ruby: Just install it. Remeber to add to path
	Cucumber: gem install cucumber
	Capybara: gem install capybara
	selenium-webdriver: gem install selenium-webdriver
	rspec: gem install rspec
	Fire fox: Just install it. Remeber to add to path
==================================================
Rule definition (in cucumber "When" statement):
	Position invariant:
		((element with (class|ID|tag) '(.+)')|(component '(.+)')) should( not)? be in the (left|right|top|bottom|vertical center|horizontal center|center)
	Color invariant:
		((element with (class|ID|tag) '(.+)')|(component '(.+)')) should( not)? be (red|green|blue|yellow|black|white|[0-9A-F]{6})
	Existence invariant:
		((element with (class|ID|tag) '(.+)')|(component '(.+)')) should( not)? exist
	Size invariant:
		((element with (class|ID|tag) '(.+)')|(component '(.+)')) should( not)? be (smaller|larger) than (\d+) in (width|height|area)
==================================================
Detail for configuration in ./cucumber/features/support/conf.rb:
	TestBaseDir: Path to the base directory of test suites.
	ResultBase: Path to the result directory.
	ImageBase: Path to the folder that contains screenshot generated by test framework during test.
	SikuliBase: Path to the folder that contains sub image for component.
	Continue: "true" means keep testing even encounter with failure, "false" means break.
	DeleteImage: "true" means delete ImageBase after finish, "false" will keep it.
	Dict: This Ruby dictionary list all Sikuli sub image that will be used in visual invariants.
	JarFile: Path to jar file to evaluate visual invariant. DO NOT CHANGE.
==================================================
Template content:
	-> cucumber: Sample feature definition of VISL, and step definition lib needed for VISL.
	-> jar: jar file used for execute VISL work.
	-> result: The check result for each invariant. It has suffix "_passed"/"_failed", and the one failed will be marked with red rectangle, the passed one will be marked with green rectangle.
	-> sikuli: The sub image used for search component in screenshot.
	-> readme.txt
	-> run.bar/run.sh
==================================================
Template use guide:
	0. Complete software requirement installation.
	1. Copy template directory to any place.
	2. Change the TestBaseDir variable to the path of template directory. (use '/' as seperator)
	3. Execute run.bat/run.sh
==================================================
Special note:
1. Sikuli does not support scaled sub image, please take screen shot in the same environment
2. Use full path every where. As '/' can be recognized in Windows, use '/' in all platform
3. size checker is in pixel
4. color checker is not very useful, as it calculate the pixel color rather than consider more details.